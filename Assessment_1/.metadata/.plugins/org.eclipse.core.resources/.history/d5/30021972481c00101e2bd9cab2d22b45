package com.assessment1.serviceA.exception;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus; 
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice; 

import com.assessment1.serviceA.utility.ResponseStructure;

@RestControllerAdvice
public class GlobalExceptionHandler {

	
	@Autowired
	ResponseStructure<Object> responseStructure;
	


    @ExceptionHandler(NullPointerException.class)
    public ResponseEntity<ResponseStructure<Object>>  handleNullPointerException(NullPointerException e) {
    	
    	responseStructure.setData(null);
    	responseStructure.setMessage("A null value was encountered: "+e);
    	responseStructure.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
    	
    	return new ResponseEntity<>(responseStructure, HttpStatus.OK);
    }
    public ResponseEntity<ResponseStructure<Object>> handleConstraintViolationException(ConstraintViolationException exe) {
        log.error("ConstraintViolationException caught: {}", exe.getMessage(), exe);

        Map<String, String> hashmap = new HashMap<>();
        for (ConstraintViolation<?> violation : exe.getConstraintViolations()) {
            String field = violation.getPropertyPath().toString();
            String message = violation.getMessage();
            hashmap.put(field, message);
        }

        structure.setMessage("Validation failed: Please check input values.");
        structure.setStatus(HttpStatus.FORBIDDEN.value());
        structure.setData(hashmap);

        log.info("Returning validation error response: {}", hashmap);
        return new ResponseEntity<>(structure, HttpStatus.BAD_REQUEST);
    }
    
}
